function dockershell() {
  docker run --rm -i -t --entrypoint=/bin/bash "$@"
}

function dockershellsh() {
  docker run --rm -i -t --entrypoint=/bin/sh "$@"
}

function dockershellhere() {
  dirname=${PWD##*/}
  docker run --rm -it --entrypoint=/bin/bash -v $(pwd):/${dirname} -w /${dirname} "$@"
}

function dockershellshhere() {
  docker run --rm -it --entrypoint=/bin/sh -v $(pwd):/${dirname} -w /${dirname} "$@"
}

function lazygit() {
  NOVERIFY=false
  while getopts "nm:" opt; do
    case $opt in
    n)
      NOVERIFY=true
      ;;
    m)
      MESSAGE=$OPTARG
      ;;
    esac
  done
  git add -N .
  git add -p
  if $NOVERIFY; then
    git commit -n -m "$MESSAGE"
  else
    git commit -m "$MESSAGE"
  fi
  if [ $? -eq 0 ]; then
    git push
  fi
}

function ipinfo() {
  if [ $(bw status | jq -r .status) != "unlocked" ]; then
    bwu
  fi
  local input=""
  if [[ -p /dev/stdin ]]; then
    input=$(cat -)
  else
    input="${@}"
  fi
  if [[ -z "$input" ]]; then
    input=""
  fi
  local token=$(get_password ipinfo)
  curl -s "ipinfo.io/${input}?token=${token}" | jq -r .
}

function get_secret() {
  bw get item "$1" --session "$BW_SESSION"
}

function get_password() {
  get_secret "$1" | jq -r ".login.password"
}

function select_merge() {
  BRANCH=$1
  DOMAIN=$2

  git merge --no-ff --no-commit $BRANCH

  DPs=$(ls data-products)

  for DP in $DPs; do
    CHECKDOMAIN=$(rg ^domain data-products/$DP/env | cut -d '"' -f2)
    if [[ $CHECKDOMAIN != $DOMAIN ]]; then
      git checkout HEAD data-products/$DP/main.tf
    fi
  done
}

function gci() {
  git clone git@github.com:ITV/$1 ~/itv/"$1"
  cd ~/itv/"$1"
}

function m1-install() {
  m1-terraform-provider-helper install $1 -v $2 --custom-build-command "go mod vendor && make fmt && make build"

  REGISTRY=$(echo $1 | cut -d "/" -f 1)
  PROVIDER=$(echo $1 | cut -d "/" -f 2)
  VERSION=$(echo $2 | sed -e "s/^v//")

  mkdir -p ~/.terraform.d/providercache_tf14on/$PROVIDER/$VERSION/registry.terraform.io/$REGISTRY/$PROVIDER/$VERSION/darwin_arm64/
  cp ~/.terraform.d/plugins/registry.terraform.io/$REGISTRY/$PROVIDER/$VERSION/darwin_arm64/* ~/.terraform.d/providercache_tf14on/$PROVIDER/$VERSION/registry.terraform.io/$REGISTRY/$PROVIDER/$VERSION/darwin_arm64/
}

function audit-aws() {
  account_id=$1
  re='^[0-9 ]+$'
  cst_response=$(cst account "$account_id")

  if [[ $account_id =~ $re ]]; then
    account_aliases="$cst_response"
  else
    account_aliases=$(cst account $(echo "$cst_response" | tr '\n' ' '))
  fi

  while IFS= read -r account_alias; do
    assume -c "$account_alias":itv-cyber-security-audit -s gd
  done <<<"$account_aliases"
}

function query-data-accounts() {
  setopt SH_WORD_SPLIT
  prefix="itv-data-"
  command=$1

  output=$(jq -n '{}')

  account_ids=$(cst account "$prefix")
  account_names=$(cst account $account_ids)

  for i in $account_names; do
    role_name=${i#"$prefix"}-pe
    result=$(aws-vault exec $role_name -- aws $command --output json 2>/dev/null)
    if [[ $? -ne 0 ]]; then
      result={}
    fi

    account_name=$i
    json=$(jq -n --arg account_name $account_name --argjson result "$result" '{$account_name: $result}')
    output=$(jq -n "$output + $json")
  done

  unsetopt SH_WORD_SPLIT
  echo "$output"
}

function verify-databricks-api-key() {
  DATABRICKS_HOST=$1
  DATABRICKS_TOKEN=$2

  curl -s --request GET "https://${DATABRICKS_HOST}/api/2.0/preview/scim/v2/Me" --header "Authorization: Bearer ${DATABRICKS_TOKEN}" | jq '.'
}

function check_yaml_changes() {
  input=$(cat)
  echo $input
  # Extract the contents between - <<-EOT and + <<-EOT blocks
  old_block=$(sed -n '/- <<-EOT/,/EOT/p' <<<"$input" | sed '1d;$d')
  new_block=$(sed -n '/+ <<-EOT/,/EOT/p' <<<"$input" | sed '1d;$d')

  # Split the blocks into lines
  old_lines=(${old_block/$'\n'/ })
  new_lines=(${new_block/$'\n'/ })

  # Compare the lines and print the differences
  for ((i = 0; i < ${#old_lines[@]}; i++)); do
    if [ "${old_lines[$i]}" != "${new_lines[$i]}" ]; then
      if [ -n "${old_lines[$i]}" ]; then
        echo "- ${old_lines[$i]}"
      fi
      if [ -n "${new_lines[$i]}" ]; then
        echo "+ ${new_lines[$i]}"
      fi
    fi
  done
}
